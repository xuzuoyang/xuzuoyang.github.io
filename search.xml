<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Shell]]></title>
    <url>%2F2018%2F04%2F10%2Fshell%2F</url>
    <content type="text"><![CDATA[shell &amp; 终端 &amp; 终端模拟器TBC shell命令 文件目录 cp/mv/mkdir/rm/ln/ls ls ls -d */ ls -p | grep -v / 需要梳理一下/bin /usr/bin /usr/local/bin等关系 权限操作 用户 /etc/passwd, /etc/group, /etc/shadow su/sudo adduser/useradd/groupadd 文件 属性 文件类型： d/-/l/b/c 2~9: owner(rwx), group(rwx), others(rwx) 目录的rwx r: ls 前提要有x w: 新建或删除文件，前提要有x x: cd chmod 八进制表示法, octal: 755/422 符号表示法: 多种设定可用逗号分隔，u+x,go=rw 更改谁: u/g/o/a 操作: +/-/= 权限: rwx chown/chgrp umask 命令之上 type/which/man/info/apropos/alias 重定向 管道 expansion &amp; quoting 文件/文本 输出 cat head/tail less Filter sort/cut/uniq/wc 搜索 find &amp; grep &amp; xargs tr awk sed find &amp; grep &amp; xargs find -name: find . -name “*.py”得加双引号，自带递归效果 -i Ignore case -mindepth/maxdepth 搜索深度 -exec: find . -iname “*.py” -exec md5 {} \; 待续 -not Inverting match -perm octal/symbolic i.e. g=r/-g=r/644 -empty -type d/f/s(socket) -size +100M/-100M/100M 单位可以是k/M/G -newer 时间 查找隐藏文件或目录 find -type d/f -name “.*” 查找最大或最小的N个文件 待续 grep grep somestring/‘regex’/“regex” [file1, file2…]/FILE_PATTERN -r 可指定目录搜索 -i Case Insensitive -w Search for full words -A, B, C Display lines after/before/around match -v Invert match -e Pattern -c Count matched lines -l Display matched file names -n Display matched line number -o show only matched string 这个在数匹配数的时候很有用，因为其他情况下只会列出匹配的行数而不是个数 grep也接受标准输入，所以可以这么用grep foo - / echo longstrinput | grep somestr OR: -e “PATTERN1” -e “PATTERN2”或者-E “P1 | P2” E和e 是不一样的，-e指代pattern，E表示extended regexp AND: -e “P1.*P2” 或者用管道 NOT: -v或者管道 –exclude/–exclude-dir/–include “PATTERN” 正则表达式 ^PATTERN / PATTERN$: start/end of the line . single charactor */+/?: 0 or more/1 or more/0 or 1注意+和？前面要加反斜杠escape [123]/[1-9] 在[]里加^表示反 |表示OR，要escape {m, n}/{m}/{m,} 出现次数，包含边界，要escape IP address “\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)” 待续 xargs ls somefiles | grep somestr和ls somefiles | xargs grep somestr结果不同，因为前者是针对列出的文件名结果进行搜索，而后者才是对这些文件的内容搜索，原因就是xargs可以用来把标准输入转化成参数。前者因为grep也可以接受标准输入所以搜索的对象是文件名，后者则是把这些文件转化成grep的文件参数 find . -name ‘foldername’ | xargs cd 是无法进入文件夹的，因为cd是shell内建的函数，xargs执行的是文件命令，即/usr/bin/cd folder是无法进入文件夹的]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python - scope]]></title>
    <url>%2F2018%2F01%2F22%2Fscope%2F</url>
    <content type="text"><![CDATA[Concept Scopes are determined textually. 命名空间就是 object 和 name 的映射集合，python 中的实现为一个 dict，而作用域也就相当于命名空间生效的文本区域。 Python 中的作用域基本分四种，LGBT，额，是 LEGB，Local &amp; Enclosing &amp; Global &amp; Builtin，即最内部（可能是函数里的函数）&amp; 次外部 &amp; 全局 &amp; 最外部，查找变量的话从里向外查找。 Keywords Names listed in a global statement must not be used in the same code block textually preceding that global statement. Names listed in a global statement must not be defined as formal parameters or in a for loop control target, class definition, function definition, importstatement, or variable annotation. Names listed in a nonlocal statement, unlike those listed in a global statement, must refer to pre-existing bindings in an enclosing scope (the scope in which a new binding should be created cannot be determined unambiguously). Names listed in a nonlocal statement must not collide with pre-existing bindings in the local scope. 有 local, nonlocal 和 global 三个关键字，可以用来指定变量的作用域。 看官方文档发现了个小坑，nonlocal 和 global，前者如果指定一个没有定义的变量会报错，后者则不会，但是 global 不能在同一个作用域先被定义，然后用 global 指定。 12345678910111213141516171819202122def scope_test(): def do_local(): spam = "local spam" def do_nonlocal(): nonlocal spam spam = "nonlocal spam" def do_global(): global spam spam = "global spam" spam = "test spam" do_local() print("After local assignment:", spam) do_nonlocal() print("After nonlocal assignment:", spam) do_global() print("After global assignment:", spam)scope_test()print("In global scope:", spam) 1234After local assignment: test spamAfter nonlocal assignment: nonlocal spamAfter global assignment: nonlocal spamIn global scope: global spam Builtin Objects such as modules and instances have an updateable __dict__ attribute; however, other objects may have write restrictions on their __dict__ attributes (for example, classes use a types.MappingProxyType to prevent direct dictionary updates). Without an argument, vars() acts like locals(). Note, the locals dictionary is only useful for reads since updates to the locals dictionary are ignored. globals(): 返回当前模块范围定义的变量字典。可以在获取当前模块定义的类或函数时自省，另外可以直接修改这个字典来改变模块内的变量的定义。 1234567def myfunc(): pass # 此时 globals()['myfunc'] 的结果如下&#123;'myfunc': &lt;function __main__.myfunc&gt;&#125;globals()['myfunc'] = 0# 此时 globals()['myfunc'] 结果为0 locals(): 获取当前局部作用域的变量字典。注意修改这个字典可能不会影响变量的定义，这点与 globals 不同。 1234567891011121314def myfunc(): a = 11 print(locals()) # 此时执行 myfunc 的结果如下&#123;'a': 11&#125;def myfunc(): a = 11 locals()['a'] = 22 print(locals()) # 此时执行 myfunc 的结果不会改变&#123;'a': 11&#125; vars(): Return the __dict__ attribute for a module, class, instance, or any other object with a __dict__ attribute.基本和locals()的用法一样，注意，locals dict是用来读取而不应该修改的。]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Deepin Trial]]></title>
    <url>%2F2018%2F01%2F06%2Fdeepin%2F</url>
    <content type="text"><![CDATA[家里的台式机一直装着双系统，可惜 ubuntu16.04 折腾了几个来回也没获得满意的效果，于是后来就变成每次开机都要点引导项进 windows，即使把 vim&amp;tmux&amp;zsh&amp;guake 都搞上也无法跟平常用的mac比，不过大概主要还是因为linux用的烂吧… 忽然跟同事聊到 linux 的发行版，于是想到，为什么不尝试下深度呢，毕竟口碑还是不错的。嗯…历经一个周末加几个晚上的折腾，总算把系统和开(娱)发(乐)工具配得差不多了，确实爽的飞起，基本已经可以脱离 windows 了，当然是如果不打游戏的话。。 另外总算趁着元旦把 ikbc 的蓝牙键盘剁手了，降了一百果然感觉好像白送了一样呢= =。不过在深度上配蓝牙的时候大脑短路了没看到蓝牙管理器，其实安装了blueman之后在下方的系统托盘里就能看见了。 不扯了，下面简单记录一下深度系统的安装和配置过程，OK，下面开始。 Install 首先就是把之前的 ubuntu 卸载了，清理一下启动项。其实就是检查一下有没有要备份的数据，然后用 EasyUEFI 清理启动项，最后把硬盘格式化一下就好了。 安装的话就是Ｕ盘安装，对了，下载的 deepin15.5 的版本，记得下了好久，直接就把电脑开了一晚上…然后制作工具的话深度官网提供了一个，直接用就好，然后安装就好了，轻松加愉快。 记得安装的时候好像有选是简单还是专家，其实就是分区的选项，嫌麻烦直接简单就可以，不过安完之后进去直接我就黑屏了…Ｎ卡真是坑，不过这不是得玩游戏么… 黑屏的问题直接搜 nomodeset 就好了，不过进去之后分辨率弱到爆，还只有一种，差点我就弃坑了…上官网搜了搜发现是显卡驱动的事儿。安装的细节都说得很清楚，双显卡貌似比较折腾，而且很多都是针对笔记本，这点要注意。我是台式机，双显卡，不过我不在乎显卡的切换，直接用N卡就很合适，所以我只去装了N卡的闭源驱动，也就是NVIDIA自己出的版本，follow教程就好。但是我发现我的问题是开机还是得用nomodeset进入，会报 DSM 之类的错误，懒得再折腾了，以后再说。 对了，深度商店除了显卡驱动管理器，所以安装的话不用敲命令，可以直接在上面选，总体来说还是会方便一些。 装完驱动之后分辨率就好多了，然后可以发现深度的UI还是很 nice 的，给了我继续踩坑的信心，颜值即正义嘛= = Software 首先看到了深度自带的一堆软件，感觉还是非常好的，Chrome &amp; Thunderbird &amp; 福昕阅读器 &amp; Chm阅读器等等，另外就是深度影音很棒，这样我基本就可以不用切windows了，作为把大部分时间花在视频娱乐的人…另外深度商店里东西也很多，像必备的 SS（真是惊到了），网易云，搜狗输入法等等，节省了超多的额外去折腾安装这些东西的时间。 对于搜狗输入法，一开始系统语言选英文的话是不会预装的，所以这时候你应该切换到中文，然后安装，然后再改回英文，嗯…应该是这个顺序。 其他的在桌面右侧提供的设置里面都非常全，包括还有很多快捷键都还没来得及好好看，不过肯定很方便就是了。 Configuration 首先就是终端了，deepin 提供了自己的终端，一开始觉得不好用，颜色什么的都不能配置，不过后来发现还不错，它是内置了很多主题可以选择，像主流的 solarized 也有，不过有一点比较坑，就是要注意它的快捷键，我就手贱把复制设置成 ctrl-c，结果在配 vim 的时候冲突了，纠结了一晚上…另外还有个很棒的雷神模式，alt+f2，这样也不用装 guake 了，非常棒。 先要做的是把 zsh 装上。然后就是主题了，对于肤浅的我来说是个非常耗时的工作，主要就是选 zsh 的主题然后配合 deepin 终端的颜色主题，经过几十番折腾选了 ys + elementary，感觉还是不错的，以后的话可能考虑自己再配一下 ys，默认就很好了已经。 然后就是 vim &amp; tmux 了，vim的快捷键刚才说了不要跟终端的快捷键冲突，否则想不起来的话真的会纠结很久… 另外因为在用 hexo 做博客所以还装了 typora 做 markdown 的编辑器，typora 很不错，三平台都支持，赞。在装 hexo 的时候碰到一点坑，npm 可以直接 apt-get 装，不过用 npm 装 hexo 的时候出现了 proxy 的错误，查了查发现是我虽然有翻墙但是没给 npm 配置，所以用 npm config set proxy url(http://blabla) 就可以了，确认一下系统代理的协议就好。 还有 python 的一套东西，差点忘了…深度自带了python2 &amp; 3，不过是3.5，倒也还好，apt-get 装一下python3-pip就好。 别的就是用什么装什么了，git，docker，一些小命令tree啊什么的…嗯，暂时就想到这么多了，OK，打完收工。]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>deepin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python Module - argparse]]></title>
    <url>%2F2017%2F12%2F21%2Fargparse%2F</url>
    <content type="text"><![CDATA[argparseArgparse 模块是 python 的内置模块，适合用来写一些 cli 脚本。 ArgumentParser作为 argparse 的解析器类，用来新建一个 parser 对象，命令的添加都要从这个对象开始。 1234567891011121314151617import argparseparser = argparse.ArgumentParser( description='this is an example parser')parser.add_argument('-a', action='store', default=1, type=int)parser.add_argument('-b', action='store_true', dest='flag')parser.add_argument('-c', action='append', default=[])print( parser.parse_args( ['-a', 3, '-b', '-c', 'one', '-c', 'two'] ))# result# Namespace(a=3, flag=True, c=['one', 'two']) add_argument 主要有 action, default, dest, type 几个参数，dest 表示传入的值将保存在 dest 对应的变量名中。 parse_args 返回的是一个 Namespace 对象，可以直接用 attr 的形式获取，如 result.flag. 没有传入的参数默认都为 None，除非 default 有设定。 parse_args 默认是从 sys.argv[1:] 获取参数。 action的几种选择 store 是默认选择，表示直接保存值，当然可能会做类型转化。 store_true / store_false 表示存入布尔值，不传的话前者默认 False 后者 True. store_const 表示存入一个预设好的常量值，用 const 表示，用于存布尔值之外的 flag. append / append_const 表示把值存入一个列表中，后者则存预设好的值。 version 会打印版本的信息然后退出。 123456parser.add_argument('-A', action='append_const', dest='const_list', const='A_CONST', default=[])parser.add_argument('-B', action='append_const', dest='const_list', const='B_CONST', default=[])print(parser.parse_args(['-A', '-B']))# result# Namespace(const_list=['A_CONST', 'B_CONST']) 1234parser.add_argument('--version', action='version', version='%(prog)s 1.0')# resultargparse_test.py 1.0 共享Parser123parser = argparse.ArgumentParser( parents=[another_module.parser]) 注意把 parent parser 的 add_help 设置成 False 比较好。 Group argparse 默认使用两个 group，一个用于 positional arguments，另一个用于 optional arguments. 12parser.add_argument('--optional', action='store_true')parser.add_argument('postional', action='store') 打印结果 123456positional arguments: positionaloptional arguments: -h, --help show this help message and exit --optional 使用 group 可以让命令更有逻辑，在 help 中显示的结果会把同组的命令放在一起，更加合理。 12345678import argparseparser = argparse.ArgumentParser(add_help=False)group = parser.add_argument_group('authentication')group.add_argument('--user', action="store")group.add_argument('--password', action="store") 打印结果 123456optional arguments: -h, --help show this help message and exitauthentication: --user USER --password PASSWORD 使用 mutually exclusive options 可以得到两个互斥的 argument，不能同时使用 123456789import argparseparser = argparse.ArgumentParser()group = parser.add_mutually_exclusive_group()group.add_argument('-a', action='store_true')group.add_argument('-b', action='store_true')print(parser.parse_args()) 嵌套parserNesting Parser 的好处就是可以创建多个并列的命令或子命令参数，比如一个文件的 cli 脚本，提供 list / create / delete 三种命令，就适合使用 subparser. 12345678910111213import argparseparser = argparse.ArgumentParser()subparsers = parser.add_subparsers(help='commands')list_parser = subparsers.add_parser('list')list_parser.add_argument('dirname')create_parser = subparsers.add_parser('create')create_parser.add_argument('dirname')delete_parser = subparsers.add_parser('delete')delete_parser.add_argument('dirname') 需要让不同的subparser执行不同方法的话 123456def f_list: passlist_parser.set_defaults(func=f_list)args = parser.parse_args('list .'.split())args.func(args) 需要知道是哪个parser起作用的话 1234subparsers = parser.add_subparsers(dest='subparser_name')subparser2 = subparsers.add_parser('2')subparser2.add_argument('y')parser.parse_args(['2', 'frobble']) 更多的 add_argument 的参数 nargs 可以指定传入参数值的个数。 N 表示具体的个数 ？ 表示0个或者1个 * 表示0个或者多个 + 表示1个或者多个 type 表示参数值的类型，可以是 int, float 甚至是 open，用来打开一个文件。 metavar 用来在 help 打印的结果中 refer 一个参数，否则默认的话 positonal argument 使用 dest，optional argument 使用大写 dest. required 可以强制某个参数为必须参数，在 argparse 中，形如 -f 或者 -bar 的参数默认为 optional 的，但是如果把 required 设置成 True 的话不提供参数值就会报错，当然这么用并没有什么意义就是了。]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>cli</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python - distribution]]></title>
    <url>%2F2017%2F12%2F17%2Fdistribution%2F</url>
    <content type="text"><![CDATA[Refs: https://packaging.python.org/tutorials/distributing-packages/#packaging-your-project https://blog.zengrong.net/post/2169.html http://pyzh.readthedocs.io/en/latest/python-setup-dot-py-vs-requirements-dot-txt.html Distribution A versioned archive file that contains Python packages, modules, and other resource files that are used to distribute a Release. The archive file is what an end-user will download from the internet and install. Distribution Package: 其实就是 python 文件的压缩包，比如 requests，解压之后里面就是 requests 的源代码。 Built Distribution: 前者叫做构建版本，提供 files 和 metadata，但是 sdist (source distribution) 不算，因为它需要构建之后才生成 BD. Binary Distribution: 属于特殊的 Built Distribution，即包含了编译好的文件。 Egg &amp; Wheel Wheels are a pre-built distribution format that provides faster installation compared to Source Distributions (sdist), especially when a project contains compiled extensions. Pip can install from either Source Distributions (sdist) or Wheels, but if both are present on PyPI, pip will prefer a compatible wheel. If pip does not find a wheel to install, it will locally build a wheel and cache it for future installs, instead of rebuilding the source distribution in the future. Egg 是 setuptools 引进的一种用于 Built Distribution 的格式。 Wheel 同样是一种 BD 的格式，并且由 pip 提供支持，并用来替代 Egg.]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
